<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>myblog</title>
    <link href="/2021/09/15/myblog/"/>
    <url>/2021/09/15/myblog/</url>
    
    <content type="html"><![CDATA[<h1 id="just-a-test-for-new-blog"><a href="#just-a-test-for-new-blog" class="headerlink" title="just a test for new blog"></a>just a test for new blog</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>统计语言模型之模型剪枝算法</title>
    <link href="/2021/09/08/asr_lm-prune_20210908/"/>
    <url>/2021/09/08/asr_lm-prune_20210908/</url>
    
    <content type="html"><![CDATA[<h2 id="统计语言模型剪枝算法"><a href="#统计语言模型剪枝算法" class="headerlink" title="统计语言模型剪枝算法"></a>统计语言模型剪枝算法</h2>]]></content>
    
    
    <categories>
      
      <category>统计语言模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>统计语言模型之平滑方法详解</title>
    <link href="/2021/09/05/asr_lm-smoothing_20210907/"/>
    <url>/2021/09/05/asr_lm-smoothing_20210907/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要引入平滑技术"><a href="#为什么要引入平滑技术" class="headerlink" title="为什么要引入平滑技术"></a>为什么要引入平滑技术</h3><p>对于大小为V的词典，n-gram模型的参数高达$V^n$，对于大量的低频词来说，无论训练语料如何扩大，其出现的频次依然很低或根本不出现，无法获得其可靠的概率估计。但训练语料中不出现的词并不意味着这些词在实际生活中也不会出现，因此需要给这些没有包括到的词也赋予一定的概率。平滑技术就是用来解决这类数据稀疏问题的，其基本思想是<strong>劫富济贫</strong>，对最大似然估计算法估计的概率进行一定调整，提高零概率，降低高概率，使得模型中的概率分布趋于合理和均匀。</p><p>平滑技术主要有三种，现有的平滑技术可以看作是这其中一种或多种的组合：</p><ul><li>折扣法（Discounting）：从已有的观察概率中调配一点给未观察到的概率</li><li>插值法（Interpolation）：将高阶模型和低阶模型进行混合</li><li>回退法（Back-off）：利用低阶模型来近似估计未观察到的高阶模型</li></ul><p>再来看一下文中相关符号理解：</p><ul><li><p>$C(.)$ ​​​​表示相应N-gram出现的次数</p></li><li><p>V 表示词典的总词汇数</p></li><li><p>N 表示训练语料库中的总词数</p></li><li>$w^t_{t-n+1}$​​​表示字符序列$\{w_{t-n+1}, w_{t-n+2}, …, w_t\}$​</li></ul><h3 id="Laplace-smoothing-amp-Add-k-smoothing"><a href="#Laplace-smoothing-amp-Add-k-smoothing" class="headerlink" title="Laplace smoothing &amp; Add-k smoothing"></a>Laplace smoothing &amp; Add-k smoothing</h3><p><strong>Laplace平滑</strong>，又称为加1平滑(Add-1 Smoothing)，<strong>该方法会将所有的N-gram计数加上1</strong>，以避免出现零概率问题。之前计数为0的n-gram将变为1，计数为1的n-gram将变为2，以此类推。</p><p>首先来回顾一下没有采用平滑方法时的<strong>unigram概率</strong>$P_{MLE}(w_t)$​​​​​计算方法，其中N​​​​表示训练语料库中的总词数：</p><script type="math/tex; mode=display">P_{MLE}(w_t) =  \frac{C(w_t)}{N}</script><p>引入Laplace smoothing后，<strong>新的unigram概率</strong>$P_{Laplace}(w_t)$​​​​计算公式变为：</p><script type="math/tex; mode=display">P_{Laplace}(w_t) = \frac{C(w_t)+1}{N+V}</script><p>再来回顾一下未采用平滑方法时的<strong>bigram概率</strong>$P_{MLE}(w_n|w_{n-1})$​​​计数公式如下：</p><script type="math/tex; mode=display">P_{MLE}(w_n|w_{n-1}) =  \frac{C(w_{n-1}w_n)}{C(w_{n-1})} = \frac{C(w_{n-1}w_n)}{\sum_w(C(w_{n-1}w))}</script><p>引入Laplace smoothing后，<strong>新的bigram概率</strong>$P_{Laplace}(w_n|w_{n-1})$​​计算公式变为：</p><script type="math/tex; mode=display">P_{Laplace}(w_n|w_{n-1}) =  \frac{C(w_{n-1}w_n)+1}{\sum_w(C(w_{n-1}w)+1)} = \frac{C(w_{n-1}w_n)+1}{C(w_{n-1}) + V}</script><p><strong>Laplace平滑存在的问题</strong>：</p><p>观察上面公式可以发现，引入Laplace平滑后计算概率不会存在零概率问题。但<strong>采用Laplace平滑给概率值带来的改变过大</strong>，即将过多的观察概率分给了那些零概率的n-gram。</p><p>一种改进方法是<strong>加K平滑(Add-k smoothing)</strong>，将计数值1改为k，其中k的取值范围为($0&lt;k\leq 1$)，以此来缓解Laplace平滑存在的问题，通常根据验证语料集来确定k的值。相应的unigram和bigram的评估公式变为：</p><script type="math/tex; mode=display">P_{Add-k}(w_t) = \frac{C(w_t)+k}{N+kV}. \quad 0 < k \leq 1</script><script type="math/tex; mode=display">P_{Add-k}(w_n|w_{n-1}) =  \frac{C(w_{n-1}w_n)+k}{\sum_w(C(w_{n-1}w)+k)} = \frac{C(w_{n-1}w_n)+k}{C(w_{n-k}) + kV}</script><p><strong>总结</strong></p><p>Laplace平滑和Add-k平滑方法在实际应用中效果较差，因此一般将其作为基准版本(baseline)。或由此引入平滑算法中的一些基本概念。如：</p><ul><li><p><strong>修正后的词频数</strong>: 考虑到上述平滑算法需要同时改变概率计算式的分母和分子，对照分析应用该平滑方法前后的词频数时不太方便，因此引入了修正后的词频数概念，目的是保持分母相同的情况下，方便观察词频数的变化情况。引入一个<strong>归一化参数</strong>$\frac{N}{N+V}$​​​，经Laplace平滑修正后的unigram词频数为$c^*(w_t) = (c(w_t) + 1)\frac{N}{N+V}$​​​​. </p></li><li><p><strong>折扣率</strong>: 定义为修正后的词频数与原来的词频数的比率，即$d=\frac{C^*(w_t)}{C(w_t)}$​​.</p></li></ul><p>下面我们来看一下Laplace平滑给概率值带来的影响，例子参考于《Speech and language processing》:</p><p>首先给出的是训练语料中的一小部分bigram计数，其中大部分bigram计数都为0：</p><div class="table-container"><table><thead><tr><th></th><th>i</th><th>want</th><th>to</th><th>eat</th><th>chinese</th><th>food</th><th>lunch</th><th>spend</th></tr></thead><tbody><tr><td>i</td><td>5</td><td>827</td><td>0</td><td>9</td><td>0</td><td>0</td><td>0</td><td>2</td></tr><tr><td>want</td><td>2</td><td>0</td><td><strong>608</strong></td><td>1</td><td>6</td><td>6</td><td>5</td><td>1</td></tr><tr><td>to</td><td>2</td><td>0</td><td>4</td><td>686</td><td>2</td><td>0</td><td>6</td><td>211</td></tr><tr><td>eat</td><td>0</td><td>0</td><td>2</td><td>0</td><td>16</td><td>2</td><td>42</td><td>0</td></tr><tr><td>chinese</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>82</td><td>1</td><td>0</td></tr><tr><td>food</td><td>15</td><td>0</td><td>15</td><td>0</td><td>1</td><td>4</td><td>0</td><td>0</td></tr><tr><td>lunch</td><td>2</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>spend</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table></div><p>再给出这些单词的unigram计数：</p><div class="table-container"><table><thead><tr><th>I</th><th>want</th><th>to</th><th>eat</th><th>chinese</th><th>food</th><th>lunch</th><th>spend</th></tr></thead><tbody><tr><td>2533</td><td><strong>927</strong></td><td>2417</td><td>746</td><td>158</td><td>1093</td><td>341</td><td>278</td></tr></tbody></table></div><p>根据未加入平滑前的概率计算公式，结合unigram和bigram的计数可以计算出{want to} bigram对应的概率：</p><script type="math/tex; mode=display">p(to|want) = \frac{p(want\,\,to)}{p(want)} = \frac{C(want\,\,to)}{C(want)} = \frac{608}{927} \approx 0.66</script><p>最后得出所有bigram的概率如表所示：</p><div class="table-container"><table><thead><tr><th></th><th>i</th><th>want</th><th>to</th><th>eat</th><th>chinese</th><th>food</th><th>lunch</th><th>spend</th></tr></thead><tbody><tr><td>i</td><td>0.002</td><td>0.33</td><td>0</td><td>0.0036</td><td>0</td><td>0</td><td>0</td><td>0.00079</td></tr><tr><td>want</td><td>0.0022</td><td>0</td><td>0.66</td><td>0.0011</td><td>0.0065</td><td>0.0065</td><td>0.0054</td><td>0.0011</td></tr><tr><td>to</td><td>0.00083</td><td>0</td><td>0.0017</td><td>0.28</td><td>0.00083</td><td>0</td><td>0.0025</td><td>0.087</td></tr><tr><td>eat</td><td>0</td><td>0</td><td>0.0027</td><td>0</td><td>0.021</td><td>0.0027</td><td>0.056</td><td>0</td></tr><tr><td>chinese</td><td>0.0063</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.52</td><td>0.0063</td><td>0</td></tr><tr><td>food</td><td>0.014</td><td>0</td><td>0.014</td><td>0</td><td>0.00092</td><td>0.0037</td><td>0</td><td>0</td></tr><tr><td>lunch</td><td>0.0059</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.0029</td><td>0</td><td>0</td></tr><tr><td>spend</td><td>0.0036</td><td>0</td><td>0.0036</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table></div><p>有了这张表我们就可以去计算句子”i want chinese food“的概率了，假设我们的语言模型是基于bigram的：</p><script type="math/tex; mode=display">p(i\,\,want\,\,chinese\,\,food) = p(i|<s>)p(want|i)p(chinese|want)p(food|chinese)p(</s>|food)</script><p>其中&lt; s &gt;和&lt; /s &gt;分别用来建模句子的开头和句子结尾。</p><ul><li><p>由于预测第一个词时没有历史词，而unigram中的$p(w)$​​​并不能代表词$w$​​​​出现在头部的概率。为了统一记号，我们引入了一个特殊的句子开始标签&lt; s &gt;，用$p(w|&lt; s &gt;)$​​来建模句子首字母是$w$​​​的概率。</p></li><li><p>语言模型是一个生成模型，但现在的问题是怎么建模句子的结束？因此就引入了&lt; /s &gt;标签来建模句子的结束，当生成了&lt; /s &gt;后则表示我们当前生成过程结束。</p></li></ul><script type="math/tex; mode=display">p(i want to chinese food) = p(i|<s>)*0.33 * 0.0065*0.52*p(</s>|food)</script><p>现在让我们来引入Laplace平滑并更新bigram的计数表：</p><div class="table-container"><table><thead><tr><th></th><th>i</th><th>want</th><th>to</th><th>eat</th><th>chinese</th><th>food</th><th>lunch</th><th>spend</th></tr></thead><tbody><tr><td>i</td><td>6</td><td>828</td><td>1</td><td>10</td><td>1</td><td>1</td><td>1</td><td>3</td></tr><tr><td>want</td><td>3</td><td>1</td><td>609</td><td>2</td><td>7</td><td>7</td><td>6</td><td>2</td></tr><tr><td>to</td><td>3</td><td>1</td><td>5</td><td>687</td><td>3</td><td>1</td><td>7</td><td>212</td></tr><tr><td>eat</td><td>1</td><td>1</td><td>3</td><td>1</td><td>17</td><td>3</td><td>43</td><td>1</td></tr><tr><td>chinese</td><td>2</td><td>1</td><td>1</td><td>1</td><td>1</td><td>83</td><td>2</td><td>1</td></tr><tr><td>food</td><td>16</td><td>1</td><td>16</td><td>1</td><td>2</td><td>5</td><td>1</td><td>1</td></tr><tr><td>lunch</td><td>3</td><td>1</td><td>1</td><td>1</td><td>1</td><td>2</td><td>1</td><td>1</td></tr><tr><td>spend</td><td>2</td><td>1</td><td>2</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p>根据引入Laplace平滑后的概率计算公式得到新的概率表：</p><div class="table-container"><table><thead><tr><th></th><th>i</th><th>want</th><th>to</th><th>eat</th><th>chinese</th><th>food</th><th>lunch</th><th>spend</th></tr></thead><tbody><tr><td>i</td><td>0.0015</td><td>0.33</td><td>0.00025</td><td>0.0025</td><td>0.00025</td><td>0.00025</td><td>0.00025</td><td>0.00075</td></tr><tr><td>want</td><td>0.0013</td><td>0.00042</td><td>0.26</td><td>0.00084</td><td>0.0029</td><td>0.0029</td><td>0.0025</td><td>0.00084</td></tr><tr><td>to</td><td>0.00078</td><td>0.00026</td><td>0.0013</td><td>0.18</td><td>0.00078</td><td>0.00026</td><td>0.0018</td><td>0.055</td></tr><tr><td>eat</td><td>0.00046</td><td>0.00046</td><td>0.0014</td><td>0.00046</td><td>0.0078</td><td>0.0014</td><td>0.02</td><td>0.00046</td></tr><tr><td>chinese</td><td>0.0012</td><td>0.00062</td><td>0.00062</td><td>0.00062</td><td>0.00062</td><td>0.052</td><td>0.0012</td><td>0.00062</td></tr><tr><td>food</td><td>0.0063</td><td>0.00039</td><td>0.0063</td><td>0.00039</td><td>0.00079</td><td>0.002</td><td>0.00039</td><td>0.00039</td></tr><tr><td>lunch</td><td>0.0017</td><td>0.00056</td><td>0.00056</td><td>0.00056</td><td>0.00056</td><td>0.0011</td><td>0.00056</td><td>0.00056</td></tr><tr><td>spend</td><td>0.0012</td><td>0.00058</td><td>0.0012</td><td>0.00058</td><td>0.00058</td><td>0.00058</td><td>0.00058</td><td>0.00058</td></tr></tbody></table></div><p>再根据上面介绍的修正后的词频数计算公式得出修正后的词频表如下：</p><div class="table-container"><table><thead><tr><th></th><th>i</th><th>want</th><th>to</th><th>eat</th><th>chinese</th><th>food</th><th>lunch</th><th>spend</th></tr></thead><tbody><tr><td>i</td><td>3.8</td><td>527</td><td>0.64</td><td>6.4</td><td>0.64</td><td>0.64</td><td>0.64</td><td>1.9</td></tr><tr><td>want</td><td>1.2</td><td>0.39</td><td>238</td><td>0.78</td><td>2.7</td><td>2.7</td><td>2.3</td><td>0.78</td></tr><tr><td>to</td><td>1.9</td><td>0.63</td><td>3.1</td><td>430</td><td>1.9</td><td>0.63</td><td>4.4</td><td>133</td></tr><tr><td>eat</td><td>0.34</td><td>0.34</td><td>1</td><td>0.34</td><td>5.8</td><td>1</td><td>15</td><td>0.34</td></tr><tr><td>chinese</td><td>2</td><td>0.098</td><td>0.098</td><td>0.098</td><td>0.098</td><td>8.2</td><td>0.2</td><td>0.098</td></tr><tr><td>food</td><td>6.9</td><td>0.43</td><td>6.9</td><td>0.43</td><td>0.86</td><td>2.2</td><td>0.43</td><td>0.43</td></tr><tr><td>lunch</td><td>0.57</td><td>0.19</td><td>0.19</td><td>0.19</td><td>0.19</td><td>0.38</td><td>0.19</td><td>0.19</td></tr><tr><td>spend</td><td>0.32</td><td>0.16</td><td>0.32</td><td>0.16</td><td>0.16</td><td>0.16</td><td>0.16</td><td>0.16</td></tr></tbody></table></div><p>可以看到(want to)的计数从608-&gt;238, (chinese food)的计数从82-&gt;8.2。可以看出加一平滑对概率值的改动非常大。</p><h3 id="Good-Turing-smoothing"><a href="#Good-Turing-smoothing" class="headerlink" title="Good-Turing smoothing"></a>Good-Turing smoothing</h3><p>Good-Turing平滑法是一种折扣法，主要思想将非零N元语法的概率均匀分给一些低概率语法，以修改最大似然估计与真实概率之间的偏离。是使用的比较多的一种平滑算法。</p><p>首先引入符号标记：</p><ul><li>$N$​代表总词数</li><li>$r\,$​​​代表n-gram出现的次数</li><li>$N_r$​​代表正好出现r次的n-gram总数</li></ul><p>将n-gram按出现的次数$r$​​作为类别，将整个语料库中所有的n-gram按次数类别进行分类。则$N=\sum_rrN_r$​​。而Good-Turing的做法是：对于任何一个出现r次的词我们都对它进行打折，计算出$r^*$​：</p><script type="math/tex; mode=display">r^* = \frac{(r+1)*N_{r+1}}{N_r}​</script><p>打折后 $\sum_r r^*N_r = \sum_r (r+1)N_{r+1} = \sum_r (r)N_{r} = N$​,对于发生频次最大的n-gram，记其频次为M，有$(M+1)N_{M+1} = 0$​​.​​</p><p>根据出现一次的事件的概率来估计未出现事件概率的思想源于：在一个较大的语料库中如十亿级别，如果某个词只出现了一次，那么它很有可能只是偶然出现，存在估计过高的问题，它的真实概率应远低于十亿分之一。这一假设对于出现二次或三次的词同样适用。但对于统计频次较高的词，则可以认为其统计次数是可靠的，可以不进行折扣。</p><p><strong>让我们通过一些例子来了解Good-turing平滑的思想</strong>：</p><p>首先针对unigram，假设现在我们现在有一个训练语料库，总词数N=1000词。训练语料库中出现1次的词有300个，出现次数2次的词有200个，出现3次的词有100个，出现0次的词剩余100个。</p><p>引入平滑前，出现0次的unigram概率为$p(w) = \frac{r_w}{N} = \frac{0}{N} = 0$​​​，而引入Good-turing平滑后，出现0次的unigram的概率为$p(w) = \frac{r^<em>_w}{N}$，其中$r^</em>_w = \frac{(0+1)N_1}{N_0} = \frac{300}{100}$​，则$p(w) = \frac{3}{1000}$​.</p><p>同理，对于n-gram，我们首先统计语料库中n-gram总数，然后按次数对n-gram进行分类，再重新计数为0的n-gram的平滑次数以获得最终的概率。</p><p><strong>Good-Turing实际使用中存在如下几个问题</strong>：</p><ul><li>Good-Turing算法对发生频次最高的词，修正的$r^* = 0$​，这显然是不合理的。</li><li>Good-Turing算法不能直接处理$N_r=0$​​的情况，比如若$N_6=0$​​，则折扣计算出的$N_5 = \frac{(r+1)N_6}{N_5} = 0$​​​​​.​改进措施有设置参数k，仅对词频数小于k的词的概率进行折扣。</li><li>Good-Turing不能实现高阶模型和低阶模型的结合，这一点可以通过公式看出来，公式里面的参数是按相邻级传递的。而高阶模型和低阶模型结合的平滑效果较好，因此Good-Turing平滑一般不单独使用，而是作为其他平滑算法的一个配套算法。</li></ul><h3 id="Katz-smoothing"><a href="#Katz-smoothing" class="headerlink" title="Katz smoothing"></a>Katz smoothing</h3><p><strong>Katz平滑</strong>通过加入高阶模型和低阶模型的结合，基于Good-Turing平滑做了<strong>两个改进</strong>：</p><ul><li>仅对频次较低的n-gram进行折扣。</li><li>加入了回退法。对频次较高的n-gram采用原始的最大似然估计，对频次较低的且非零的n-gram采用Good-Turing算法进行打折，对零频次的n-gram则回退到n-1-gram。其中折扣省下来的概率值将按照低一阶模型的概率分布分配给零概率的词。</li></ul><p><strong>Katz平滑的计算公式为</strong>：</p><script type="math/tex; mode=display">P_{Katz}(w_t|w^{t-1}_{t-n+1})=\left\{\begin{aligned}& \frac{C(w^t_{t-n+1})}{C(w^{t-1}_{t-n+1})},\qquad \qquad if\,C(w^t_{t-n+1})>k\\& d_r\frac{C(w^t_{t-n+1})}{C(w^{t-1}_{t-n+1})}, \qquad  \qquad if\, 0<C(w^t_{t-n+1})\leq k \\& backoff(w^{t-1}_{t-n+1})P_{Katz}(w_t|w^{t-1}_{t-n+2}),\qquad otherwise\end{aligned}\right.</script><p>一般认为大的计数值认为是可靠的，不需要进行折扣，因此Katz引入了一个计数值$k$，当$r&gt;k$情况下使用最大似然估计。当$0&lt;r \leq k$时，对最大似然估计值进行一定的折扣。当$r=0$时，概率计算回退到(n-1)-gram模型，将折扣下来的概率量分配给计数为0的n-gram。其中，记$r=C(w^t_{t-n+1})$，$d_r$为根据Good-Turing算法计算出来的折扣系数，近似地等于$\frac{r^*}{r}$。$backoff(w^{t-1}_{t-n+1})$是与上下文相关的回退系数，也是归一化系数，其作用是保证修正后的概率和保持为1。</p><p>下面我们来看看如何计算折扣率和回退系数：</p><p><strong>计算折扣率$d_r$:</strong>​</p><p>$d_r$的选择遵循如下约束条件：</p><ul><li><p>最终折扣量与Good-Turing估计预测的减值量成比例。即对于某些常数$μ$​, $r\in\{1,2,…,k\}$​​，有公式如下，$\frac{r^*}{r}$表示Good-Turing的折扣率：</p><script type="math/tex; mode=display">1-d_r = μ(1-\frac{r^*}{r})</script></li><li><p>全局n元语法中被折扣的计数总量等于根据Good-Turing估计应该分配给次数为零的n元语法的总数。有公式：</p></li></ul><script type="math/tex; mode=display">\sum_{r=1}^{k}n_r(1-d_r)r = n_1</script><p>这些公式的唯一解为：</p><script type="math/tex; mode=display">d_r = \frac{\frac{r^*}{r} - \frac{(k+1)n_{k+1}}{n_1}}{1-\frac{(k+1)n_{k+1}}{n_1}}</script><p>其中当$r&gt;k$时，$d_r=1$。</p><p><strong>计算回退系数</strong>$backoff(w^{t-1}_{t-n+1}):$​​​​​</p><script type="math/tex; mode=display">backoff(w^{t-1}_{t-n+1}) = \frac{ 1- \sum_{w_i: C(w^t_{t-n+1})>0}  P_{Katz} (w_t|w^{t-1}_{t-n+1})}{ \sum_{w_i:C(w^t_{t-n+1})=0} P_{Katz} (w_t|w^{t-1}_{t-n+2}) }</script><p>其中分子中的$\sum_{w_i:C(w^t_{t-n+1})&gt;0}{P_{Katz}(w_t|w^{t-1}_{t-n+1})}$​表示所有的非零n-gram概率总和，分母表示所有计数为0的n-gram回退模型的概率总和。</p><h3 id="Jelinek-Mercer-smoothing"><a href="#Jelinek-Mercer-smoothing" class="headerlink" title="Jelinek-Mercer smoothing"></a>Jelinek-Mercer smoothing</h3><p>假设要在一批训练语料上构建bigram语言模型，其中，有两对词的同现次数为0：</p><script type="math/tex; mode=display">C(send\,\,the) = 0,  \quad C(send\,\,thou) = 0</script><p>那么按照​加法平滑或Good-Turing估计方法可以得到：</p><script type="math/tex; mode=display">P(the|send) = P(thou|send)</script><p>但是直觉上我们认为应该有：</p><script type="math/tex; mode=display">P(the|send) > P(thou|send)</script><p>因为冠词$the$要比单词$thou$出现的频率高得多。为了利用这种情况，一种处理方法是在bigram模型中加入unigram模型，那么可以按照下面的方法将bigram和unigram模型进行线性插值：</p><script type="math/tex; mode=display">P_{interp}(w_i|w_{i-1}) =  \lambda P_{ML}(w_i|w_{i-1}) + (1-\lambda) P_{ML}(w_i)</script><p>当没有足够的语料估计高阶模型的概率时，低阶模型往往可以提供有用的信息。Jelinek和Mercer提出了通用的插值模型，即第n阶平滑模型可以递归的定义为n阶最大似然估计模型和(n-1)阶平滑模型之间的线性插值：</p><script type="math/tex; mode=display">P_{interp}(w_i|w_{i-1}) = \lambda_{w^{i-1}_{i-n+1}} P_{ML}(w_i|w^{i-1}_{i-n+1}) + (1-\lambda_{w^{i-1}_{i-n+1}}) P_{interp}(w_i|w^{i-1}_{i-n+2})</script><p>为了结束递归，可以用最大似然分布作为平滑的1阶模型，或者用均匀分布作为平滑的0阶模型：</p><script type="math/tex; mode=display">P_{unif}(w_i) = \frac{1}{|V|}</script><p><strong>插值系数计算</strong></p><p>给定一个固定的$P_{ML}$​，可以使用Baum-Welch算法有效地搜索出$\lambda_{w^{i-1}_{i-n+1}}$​，使某些数据的概率最大。为了得到有意义的结果，估计$\lambda_{w^{i-1}_{i-n+1}}$​的语料应该与计算$P_{ML}$​的语料不同。在留存插值方法（heldout interpolation）中，保留一部分训练语料来达到这个目的，这部分留存语料不参与计算$P_{ML}$​。而Jelinek和Mercer提出了一种叫做删除插<br>值法（deleted interpolation）或删除估计法（deleted estimation）的处理技术，训练语料的不同部分在训练$P_{ML}$​或时作变换，从而使结果平均。</p><p>插值系数$\lambda_{w^{i-1}_{i-n+1}}$是与上下文相关的，对于出现过多次的上下文$w^{i-1}_{i-n+1}$，比如一千多次，可认为高阶模型的数据是可靠的，因此$\lambda_{w^{i-1}_{i-n+1}}$应该大一些。相反，若上下文$w^{i-1}_{i-n+1}$出现的次数较少，则认为高阶模型的数据不是很可靠，因此$\lambda_{w^{i-1}_{i-n+1}}$应该小一些。由于不同的上下文$w^{i-1}_{i-n+1}$对应的插值系数是不一样的，而精确的训练这么多独立的参数是不太现实的。因此Jelinek和Mercer建议将$\lambda_{w^{i-1}_{i-n+1}}$按$C(w^{i-1}_{i-n+1})$划分成几部分或几段，令同一部分里的上下文对应的$\lambda_{w^{i-1}_{i-n+1}}$相等，以此来减少参数量。理想情况下，根据先验知识将应该具有相似值的$\lambda_{w^{i-1}_{i-n+1}}$归并到一起。</p><h3 id="Witten-Bell-smoothing"><a href="#Witten-Bell-smoothing" class="headerlink" title="Witten-Bell smoothing"></a>Witten-Bell smoothing</h3><p>Witten-Bell平滑可认为是Jelinek-Mercer平滑的一个实例，计算公式同Jelinek-Mercer:</p><script type="math/tex; mode=display">P_{interp}(w_i|w_{i-1}) = \lambda_{w^{i-1}_{i-n+1}} P_{ML}(w_i|w^{i-1}_{i-n+1}) + (1-\lambda_{w^{i-1}_{i-n+1}}) P_{interp}(w_i|w^{i-1}_{i-n+2})</script><p>不同的地方在于计算插值系数的方式：</p><script type="math/tex; mode=display">1-\lambda_{w^{i-1}_{i-n+1}} = \frac{N_{1+}(w^{i-1}_{i-n+1}.)}{N_{1+}(w^{i-1}_{i-n+1}.)+C(w^{i-1}_{i-n+1})}</script><p>其中$N_{1+}$表示跟在词串 $w^{i-1}_{i-n+1}$​后面的不同词的个数，其规范定义为：</p><script type="math/tex; mode=display">N_{1+}(w^{i-1}_{i-n+1}.) = |\{v: C(w^{i-1}_{i-n+1}v)>0\}|</script><p><strong>对插值系数的理解：</strong></p><p>使用高阶模型的概率为$\lambda_{w^{i-1}_{i-n+1}}$​，使用低阶模型的概率为$1-\lambda_{w^{i-1}_{i-n+1}}$​。把$1-\lambda_{w^{i-1}_{i-n+1}}$​理解为在训练语料库中没有观察到单词出现在$w^{i-1}_{i-n+1}$​​​之后的概率，即出现新词的概率。这意味着，对于历史词串$w^{i-1}_{i-n+1}$​，若其后面接新词的概率越大，则由其形成的n-gram很有可能在语料库中没有出现过，因此插值模型应当赋予低阶模型更高的权重。</p><p>Witten-Bell的思想和Good-Turing估计有异曲同工之妙，我们可以来重新认识一下Good-Turing的公式定义。Good-Turing平滑中，将出现过一次($r_1$)的n-gram的概率$\frac{r_1}{N}$分配给所有未出现过的n-gram，概率$\frac{r_1}{N}$可另表示为词串$w^{i-1}_{i-n+1}$后面的新词数量仅为1的情形。则改写$N_{1+}$为$N_1$：</p><script type="math/tex; mode=display">N_{1}(w^{i-1}_{i-n+1}.) = |\{v: C(w^{i-1}_{i-n+1}v)=1\}|</script><h3 id="Absolute-smoothing"><a href="#Absolute-smoothing" class="headerlink" title="Absolute smoothing"></a>Absolute smoothing</h3><p>绝对折扣法也采用了高低阶结合的思想来处理平滑，但不同于Jelinek-Mercer方法中高阶模型乘以折扣因子的做法，而是对高阶模型的计数减去一个统一的固定值$0\leq D \leq1$​：</p><script type="math/tex; mode=display">P_{Abs}(w_t|w^{t-1}_{t-n+1}) = \frac{max(C(w^t_{t-n+1})-D, 0)}{C(w^{t-1}_{t-n+1})} + \lambda_{w^{t-1}_{t-n+1}}P_{Abs}(w_t|w^{t-1}_{t-n+2})</script><p><strong>$\lambda_{w^{t-1}_{t-n+1}}$​​归一化参数计算</strong></p><p>对词频数较高的n-gram来说，减去一个小于1的值D对概率影响不大，因此这种做法主要是针对估计不准、词频数较低的情况。$\lambda_{w^{t-1}_{t-n+1}}$​为归一化参数，其计算式为：</p><script type="math/tex; mode=display">1 - \lambda_{w^{t-1}_{t-n+1}} = \frac{D}{\sum_{w_i}{C(w^i_{i-n+1})}}N_{1+}(w^{t-1}_{t-n+1}.)</script><p><strong>减值系数D计算：</strong></p><p>其中$r_1$和$r_2$是训练语料中刚好出现1次和2次的n元语法的总数，n是被插值的模型的阶数。</p><script type="math/tex; mode=display">D = \frac{r_1}{r_1+2r_2}</script><h3 id="Kneser-Ney-smoothing"><a href="#Kneser-Ney-smoothing" class="headerlink" title="Kneser-Ney smoothing"></a>Kneser-Ney smoothing</h3><p>Knerser-Ney平滑方法是一种扩展的绝对减值平滑算法，采用了一种新的高低阶结合的方式来处理平滑。在前面介绍的高低阶模型结合算法中，低阶模型被平滑过的。但理想情况下，<strong>低阶模型只有在高阶模型的次数较少时才有较大的作用</strong>。</p><p>让我们通过一个例子来辅助理解：</p><ul><li>I can’t see without my …….?</li></ul><p>现在有替补词汇“glasses”和“Francisco”，由于Francisco很常见，而且通常只出现在San后面。由于$P(Francisco)$​很大，如果采用绝对折扣法进行平滑处理，那么Francisco会和其他词如my结合成为一个新的bigram，也会被赋予一个较大的概率值，这显然是不合理的。</p><p><strong>因此Kneser-Ney提出：使用的低阶模型的概率不应与其词频数成正比，而应与其能组成的不同的词的种类数成正比。因为假设某个词所形成的不同词组越丰富，则该词越容易与其他词形成新的词组，因此概率越高。</strong></p><p>很明显我们这里的Francisco在这个条件下的概率值应该更低。因此我们看出来Kneser-Ney和上面介绍的模型的区别如下：</p><ul><li>普通的模型估计词$w_t$出现的概率值：$P(w_t) = \frac{C(w_t)}{\sum_{w_i}C(w_i)}$​</li><li>KN改进后的计算方法是，统计词$w_t$​成为某个词的一个新的连续词的可能性：$P_{continuactionCount} = \frac{N_{1+(.w_t)}}{N_{1+}(..)}$​</li></ul><p><strong>Kneser-Ney平滑公式</strong>：</p><script type="math/tex; mode=display">P_{KN}(w_t|w^{t-1}_{t-n+1}) = \frac{max(C_{KN}(w^t_{t-n+1})-D, 0)}{C_{KN}(w^{t-1}_{t-n+1})} + \lambda_{w^{t-1}_{t-n+1}}P_{KN}(w_t|w^{t-1}_{t-n+2})</script><p>其中$C_{KN}(w^t_{t-n+1})$和$\lambda_{w^{t-1}_{t-n+1}}$计算公式如下：</p><script type="math/tex; mode=display">C_{KN}(.)=\left\{\begin{aligned}& count(.),\qquad \qquad for\,the\,highest\,order\,ngram\\& contiuationCount(.), \qquad  \qquad for\,all\,other\,low\,order\,ngrams\\\end{aligned}\right.</script><script type="math/tex; mode=display">1 - \lambda_{w^{t-1}_{t-n+1}} = \frac{D}{\sum_{w_i}{C(w^i_{i-n+1})}}N_{1+}(w^{t-1}_{t-n+1}.)</script><p>$C_{KN}(.)$这个计算函数根据插值组合处于哪个层级而选择不同的计算方法，比如我们要训练trigram模型，那么可以将trigram看作高阶n-gram，而将bigram和unigram看作低阶n-gram。</p><p>因此计算高阶trigram时，计算公式如下：</p><script type="math/tex; mode=display">P_{KN}(w_t|w_{t-2}w_{t-1}) = \frac{max(C(w_{t-2}w_{t-1}w_t)-D, 0)}{C(w_{t-2}w_{t-1})} + \lambda_{w_{t-2}w_{t-1}}P_{KN}(w_t|w_{t-1})</script><p>而计算bigram时，计算公式如下：</p><script type="math/tex; mode=display">P_{KN}(w_t|w_{t-1}) = \frac{max(N_{1+}(.w_{t-1}w_t)-D, 0)}{N_{1+}(.w_{t-1})} + \lambda_{w_{t-1}}P_{KN}(w_t)</script><h3 id="Modified-Kneser-Ney-smoothing"><a href="#Modified-Kneser-Ney-smoothing" class="headerlink" title="Modified Kneser-Ney smoothing"></a>Modified Kneser-Ney smoothing</h3><p>另外Chen和Goodman还提出了一种改进的Kneser-Ney平滑算法，不同于对原算法中所有的n-gram词频数减去一个固定值D，因为词频为1或2的理想减值D与词频较高的n-gram的减值有较大不同。改进后的算法对词频数为1、2、大于3这三种情况，分别使用三个不同的减值系数$D_1, D_2, D_{3+}$​​，计算公式如下：</p><script type="math/tex; mode=display">Y= \frac{N_1}{N_1+2N_2}, D_1=1-2Y\frac{N_2}{N_1}, D_2 = 2-3Y\frac{N_3}{N_2}, D_3 = 3-4Y\frac{N_4}{N_3}</script><h3 id="平滑方法的比较"><a href="#平滑方法的比较" class="headerlink" title="平滑方法的比较"></a>平滑方法的比较</h3><p>Chen和Goodman针对上面的平滑方法做了大量实验，实验评测指标为：测试语料的交叉熵和语音识别的字错误率。得到了如下的结论：</p><ul><li><p>一般而言，插值法的性能要优于回退法，Kneser-Ney平滑方法和Modified Kneser-Ney平滑要优于其他算法。</p></li><li><p>不管训练语料规模多大，对于二元和三元语言模型，Kneser-Ney平滑方法和Modified Kneser-Ney平滑方法效果都好于其他平滑方法。</p></li><li>一般情况下，Katz平滑和Jelinek-Bell平滑有较好的效果，但仍然比不上Kneser-Ney和Modified Kneser-Ney平滑方法。</li><li>在稀疏数据的情况下，Jelinek-Bell平滑优于Katz平滑。而在大量数据的情况下，Katz平滑优于Jelinek-Bell平滑。</li></ul>]]></content>
    
    
    <categories>
      
      <category>统计语言模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Plus 课后习题 第五章</title>
    <link href="/2021/08/06/cpp_chapter5_20210809/"/>
    <url>/2021/08/06/cpp_chapter5_20210809/</url>
    
    <content type="html"><![CDATA[<h2 id="第五章-复合类型"><a href="#第五章-复合类型" class="headerlink" title="第五章 复合类型"></a>第五章 复合类型</h2><h3 id="5-8-1"><a href="#5-8-1" class="headerlink" title="5.8.1"></a>5.8.1</h3><blockquote><p>入口条件循环和出口条件循环之间的区别是什么？各种C+=循环分别属于其中的哪一种？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// a. actor是由30个char组成的数组</span><br><span class="hljs-keyword">char</span> actor[<span class="hljs-number">30</span>];<br>    <br><span class="hljs-comment">// b. betsie是由100个short组成的数组</span><br><span class="hljs-keyword">char</span> betsie[<span class="hljs-number">100</span>];<br><br><span class="hljs-comment">// c. chuck是由13个float组成的数组</span><br><span class="hljs-keyword">float</span> chuck[<span class="hljs-number">13</span>];<br><br><span class="hljs-comment">// d. dipsea是由64个long double组成的数组</span><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> dipsea[<span class="hljs-number">64</span>]<br></code></pre></td></tr></table></figure><h3 id="5-8-2"><a href="#5-8-2" class="headerlink" title="5.8.2"></a>5.8.2</h3><blockquote><p>如果下面的代码片段是有效程序的组成部分，它将打印什么内容？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    cout &lt;&lt; i;<br>    cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="5-8-3"><a href="#5-8-3" class="headerlink" title="5.8.3"></a>5.8.3</h3><blockquote><p>如果下面的代码片段是有效程序的组成部分，它将打印什么内容？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j+=<span class="hljs-number">3</span>)<br>    cout &lt;&lt; j;<br>cout &lt;&lt; endl &lt;&lt; j &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="5-8-4"><a href="#5-8-4" class="headerlink" title="5.8.4"></a>5.8.4</h3><blockquote><p>如果下面的代码片段是有效程序的组成部分，它将打印什么内容？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> j = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span> ( ++j &lt; <span class="hljs-number">9</span>)<br>    cout &lt;&lt; j++ &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="5-8-5"><a href="#5-8-5" class="headerlink" title="5.8.5"></a>5.8.5</h3><blockquote><p>如果下面的代码片段是有效程序的组成部分，它将打印什么内容？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> k = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">do</span><br>    cout &lt;&lt; <span class="hljs-string">&quot; k = &quot;</span> &lt;&lt; k &lt;&lt; endl;<br><span class="hljs-keyword">while</span>(k++ &lt; <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h3 id="5-8-6"><a href="#5-8-6" class="headerlink" title="5.8.6"></a>5.8.6</h3><blockquote><p>编写一个打印1、2、4、8、16、32、64的for循环，每轮循环都将计数变量的值乘以2.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">char</span> a[] = <span class="hljs-string">&quot;cheeseburger&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="5-8-7"><a href="#5-8-7" class="headerlink" title="5.8.7"></a>5.8.7</h3><blockquote><p>如何在循环体中包括多条语句？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br>string strs = <span class="hljs-string">&quot;Waldorf Salad&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="5-8-8"><a href="#5-8-8" class="headerlink" title="5.8.8"></a>5.8.8</h3><blockquote><p>下面的语句是否有效？如果无效，原因是什么？如果有效，它将完成什么工作？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> x = (<span class="hljs-number">1</span>,<span class="hljs-number">024</span>);<br><br><span class="hljs-comment">//下面的语句又如何呢？</span><br><span class="hljs-keyword">int</span> y;<br>y = <span class="hljs-number">1</span>,<span class="hljs-number">024</span>;<br></code></pre></td></tr></table></figure><h3 id="5-8-9"><a href="#5-8-9" class="headerlink" title="5.8.9"></a>5.8.9</h3><blockquote><p>在查看输入方面，cin &gt;&gt; ch同cin.get(ch)和ch=cin.get()有什么不同？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">fish golden_fish = &#123;<br>    <span class="hljs-string">&quot;golden&quot;</span>,<br>    <span class="hljs-number">13</span>,<br>    <span class="hljs-number">12.99</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5-9-1"><a href="#5-9-1" class="headerlink" title="5.9.1"></a>5.9.1</h3><blockquote><p>编写一个C++程序，如下述输出示例所示的那样请求并显示信息：</p><p>What is your first name? Betty Sue</p><p>What is your last name? Yewe</p><p>What letter grade do you deserve? B</p><p>What is your age? 22</p><p>Name: Yewe, Betty Sue</p><p>Grade: C</p><p>Age: 22</p><p>注意：该程序应该接受的名字包含多个单词。此外，程序将向下调整成绩，即向上调一个字母。假设用户请求A、B、或C，所以不必担心D和F之间的空档。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">peopleinfo</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">char</span> grade;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> age;<br>&#125;;<br>    <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    peopleinfo people;<br>    cout &lt;&lt; <span class="hljs-string">&quot;What is your first name? &quot;</span>;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    cin.<span class="hljs-built_in">getline</span>(name);<br>    cin.<span class="hljs-built_in">get</span>();<br>    people.name[<span class="hljs-number">0</span>] = name;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;What is your last name? &quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name);<br>    cin.<span class="hljs-built_in">get</span>();<br>    people.name[<span class="hljs-number">1</span>] = name;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;What letter grade do you deserve? &quot;</span>;<br>    cin &gt;&gt; people.grade;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;What is your age? &quot;</span>;<br>    cin &gt;&gt; people.age;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; people.name[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; people.name[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Grade: &quot;</span> &lt;&lt; ++people.grade &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Age: &quot;</span> &lt;&lt; people.age &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-2"><a href="#5-9-2" class="headerlink" title="5.9.2"></a>5.9.2</h3><blockquote><p>修改程序清单4.4，使用C++ string类而不是char数组。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//清单4.4程序代码</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ArSize = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">char</span> name[ArSize];<br>    <span class="hljs-keyword">char</span> dessert[ArSize];<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your name: \n&quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name, ArSize);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your favorite dessert: \n&quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(dessert, ArSize);<br>    cout &lt;&lt; <span class="hljs-string">&quot;I have some delicious &quot;</span> &lt;&lt; dessert;<br>    cout &lt;&lt; <span class="hljs-string">&quot; for you, &quot;</span> &lt;&lt; name &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//string类改写版程序代码</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string name, dessert;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your name: \n&quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, name);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your favorite dessert: \n&quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, dessert);<br>    cout &lt;&lt; <span class="hljs-string">&quot;I have some delicious &quot;</span> &lt;&lt; dessert;<br>    cout &lt;&lt; <span class="hljs-string">&quot; for you, &quot;</span> &lt;&lt; name &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-3"><a href="#5-9-3" class="headerlink" title="5.9.3"></a>5.9.3</h3><blockquote><p>编写一个程序，它要求用户首先输入其名，然后输入其姓；然后程序使用一个逗号和空格将姓和名组合起来，并存储和显示组合结果。请使用char数组和头文件cstring中的函数。下面是该程序运行时的情形：</p><p>Enter your first name: Flip</p><p>Enter your last name: Fleming</p><p>Here’s the information in a single string: Fleming, Flip</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">2</span>][<span class="hljs-number">20</span>];<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your first name: &quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name[<span class="hljs-number">0</span>], <span class="hljs-number">20</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your last name: &quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name[<span class="hljs-number">1</span>], <span class="hljs-number">20</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Here&#x27;s the information in a single string: &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">strcat</span>(<span class="hljs-built_in">strcat</span>(name[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;, &quot;</span>), name[<span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-4"><a href="#5-9-4" class="headerlink" title="5.9.4"></a>5.9.4</h3><blockquote><p>编写一个程序，它要求用户首先输入其名，再输入其姓；然后程序使用一个逗号和空格将姓和名组合起来，并存储和显示组合结果。请使用string对象和头文件string中的函数。下面是该程序运行时的情形：</p><p>Enter your first name: Flip</p><p>Enter your last name: Fleming</p><p>Here’s the information in a single string: Fleming, Flip</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string name[<span class="hljs-number">2</span>];<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your first name: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, name[<span class="hljs-number">0</span>]);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your last name: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, name[<span class="hljs-number">1</span>]);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Here&#x27;s the information in a single string: &quot;</span>;<br>    cout &lt;&lt; name[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;, &quot;</span> + name[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-5"><a href="#5-9-5" class="headerlink" title="5.9.5"></a>5.9.5</h3><blockquote><p>结构CandyBar包含三个成员。第一个成员存储了糖块的品牌；第二个成员存储糖块的重量（可以有小数）；第三个成员存储了糖块的卡路里含量（整数）。请编写一个程序，声明这个结构，创建一个名为snack的CandyBar变量，并将其成员分别初始化为“Mocha Munch”、2.3和350.初始化应在声明snack时进行。最后，程序显示snack变量的内容。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CandyBar</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> calorie;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    CandyBar snack = &#123;<br>        <span class="hljs-string">&quot;Mocha Munch&quot;</span>,<br>        <span class="hljs-number">2.3</span>,<br>        <span class="hljs-number">350</span><br>    &#125;;<br>    <br>    cout &lt;&lt; snack.brand &lt;&lt; endl;<br>    cout &lt;&lt; snack.weight &lt;&lt; endl;<br>    cout &lt;&lt; snack.calorie &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-6"><a href="#5-9-6" class="headerlink" title="5.9.6"></a>5.9.6</h3><blockquote><p>结构CandyBar包含3个成员，如编程练习5所示。请编写一个程序，创建一个包含3个元素的CandyBar数组，并将它们初始化为所选择的值，然后显示每个结构的内容。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CandyBar</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> calorie;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    CandyBar snack[<span class="hljs-number">3</span>] = &#123;<br>        &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.3</span>, <span class="hljs-number">350</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">450</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">550</span>&#125;<br>    &#125;;<br>    <br>    cout &lt;&lt; snack[<span class="hljs-number">0</span>].brand &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">1</span>].weight &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">3</span>].calorie &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-7"><a href="#5-9-7" class="headerlink" title="5.9.7"></a>5.9.7</h3><blockquote><p>William Wingate从事披萨饼分析服务。对于每个披萨饼，他都需要记录下列信息：</p><p>披萨饼公司的名称，可以有多个单词组成。</p><p>披萨饼的直径。</p><p>披萨饼的重量。</p><p>请设计一个能够存储这些信息的结构，并编写一个使用这些结构变量的程序。程序将请求用户输入上述信息，然后显示这些信息。请你使用cin（或其他方法）和cout。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Pizza</span>&#123;</span><br>    string comp;<br>    <span class="hljs-keyword">double</span> diam;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Pizza bug_pizza;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the company name of Pizza: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, bug_pizza.comp);<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the diameter of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza.diam;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the weight of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza.weight;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;company: &quot;</span> &lt;&lt; bug_pizza.comp &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-8"><a href="#5-9-8" class="headerlink" title="5.9.8"></a>5.9.8</h3><blockquote><p>完成编程练习7，但使用new来动态分配数组，而不是声明一个结构变量。另外，让程序在请求输入披萨饼公司名称之前输入披萨饼的直径。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Pizza</span>&#123;</span><br>    string comp;<br>    <span class="hljs-keyword">double</span> diam;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Pizza *bug_pizza = <span class="hljs-keyword">new</span> Pizza;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the diameter of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza-&gt;diam;<br>    cin.<span class="hljs-built_in">get</span>();<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the company name of Pizza: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, bug_pizza-&gt;comp);<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the weight of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza-&gt;weight;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;company: &quot;</span> &lt;&lt; bug_pizza-&gt;comp &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">delete</span> bug_pizza;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-9"><a href="#5-9-9" class="headerlink" title="5.9.9"></a>5.9.9</h3><blockquote><p>完成编程练习6，但使用new来动态分配数组，而不是声明一个包含3个元素的CandyBar数组。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CandyBar</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> calorie;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    CandyBar *snack = <span class="hljs-keyword">new</span> CandyBar[<span class="hljs-number">3</span>];<br>    *snack = &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.3</span>, <span class="hljs-number">350</span>&#125;;<br>    *(snack+<span class="hljs-number">1</span>) = &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">450</span>&#125;;<br>    *(snack+<span class="hljs-number">2</span>) = &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">550</span>&#125;;<br>    <br>    cout &lt;&lt; snack[<span class="hljs-number">0</span>].brand &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">1</span>].weight &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">3</span>].calorie &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-9-10"><a href="#5-9-10" class="headerlink" title="5.9.10"></a>5.9.10</h3><blockquote><p>编写一个程序，让用户输入三次40码跑的成绩（如果您愿意，也可以让用户输入40米跑的成绩），并显示次数和平均成绩。请使用一个array数组对象来存储数据（如果编译器不支持array类，请使用数组）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    array&lt;<span class="hljs-keyword">double</span>, 3&gt; match_grade;<br>    cout &lt;&lt; <span class="hljs-string">&quot;input: &quot;</span>;<br>    cin &gt;&gt; match_grade[<span class="hljs-number">0</span>];<br>    count++;<br>    cin &gt;&gt; match_grade[<span class="hljs-number">1</span>];<br>    count++;<br>    cin &gt;&gt; match_grade[<span class="hljs-number">2</span>];<br>    count++;<br>   <br>    cout &lt;&lt; <span class="hljs-string">&quot;Total times: &quot;</span> &lt;&lt; count &lt;&lt; endl;<br>    cout &lt;&lt; (match_grade[<span class="hljs-number">0</span>] + match_grade[<span class="hljs-number">1</span>] + match_grade[<span class="hljs-number">2</span>]) / count &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>课后习题答案</category>
      
      <category>C++ Primer Plus 6th</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux chattr 命令详解</title>
    <link href="/2021/08/06/linux_command_chattr/"/>
    <url>/2021/08/06/linux_command_chattr/</url>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><blockquote><p>chattr命令用于更改Linux文件的属性，比如设置文件为不可删除、只读等类型。只有具有sudo权限的用户才能执行这项命令。chattr可看成是change attributes的缩写：ch+attr</p><p>lsattr可查看chattr命令执行后的文件属性</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chattr [ -RVf ] [ -v version ] [ mode ] files<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">可选参数：[ -RVf ] 和 [-v version]<br>-R: 递归处理，将指定目录下的所有文件及子目录一并处理.<br>-V: 显示输出指令执行过程<br>-f: 若该文件权限无法被更改也不要显示错误讯息<br>-v version: 设置文件或目录版本<br><br><br>必选参数：[ mode ]<br>+&lt;属性&gt;：开启文件的该项属性<br>-&lt;属性&gt;：关闭文件的该项属性<br>=&lt;属性&gt;：使得文件只有该项属性<br><br><br>属性：<br>a: 针对文件：只允许程序在文件后面追加数据。针对文件夹：只允许创建和修改文件内容，但不允许删除<br>A: 告诉系统不修改该文件的最后访问时间，以减小磁盘I/O负载<br>b: 不更新文件的最后存取时间<br>c: 将文件或目录压缩后存放<br>C: 不执行写入时复制，多个用户对同一资源进行写操作时，不生成副本<br>d: 当dump程序执行时，该文件或目录不会被dump备份<br>D: 同步更新文件或目录<br>e: 使用extent文件格式<br>i: 不得任意改动文件或目录<br>j: 数据在写入到文件前暂存到journal<br>s: 保密性删除文件或目录<br>S: 及时更新文件或目录<br>t: 不支持文件尾部合并<br>T: 使得目录下的文件存放位置不存在联系，因为一般而言，同一目录下的文件在硬盘上的存放位置越相邻越好<br>u: 预防意外删除<br><br></code></pre></td></tr></table></figure><h3 id="示例大全"><a href="#示例大全" class="headerlink" title="示例大全"></a>示例大全</h3><h4 id="设置文件为只读、不可删除"><a href="#设置文件为只读、不可删除" class="headerlink" title="设置文件为只读、不可删除"></a>设置文件为只读、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># test.txt文件</span><br>sudo chattr +i test.txt<br></code></pre></td></tr></table></figure><h4 id="设置目录下的所有文件为只读、不可删除"><a href="#设置目录下的所有文件为只读、不可删除" class="headerlink" title="设置目录下的所有文件为只读、不可删除"></a>设置目录下的所有文件为只读、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># home目录</span><br>sudo chattr -R +i /home/<br></code></pre></td></tr></table></figure><h4 id="设置文件为只能追加、不可删除"><a href="#设置文件为只能追加、不可删除" class="headerlink" title="设置文件为只能追加、不可删除"></a>设置文件为只能追加、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chattr +a test.txt<br></code></pre></td></tr></table></figure><h4 id="设置目录下的所有文件只能追加、不可删除"><a href="#设置目录下的所有文件只能追加、不可删除" class="headerlink" title="设置目录下的所有文件只能追加、不可删除"></a>设置目录下的所有文件只能追加、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chattr -R +a /home/<br></code></pre></td></tr></table></figure><h4 id="取消文件的只读、不可删除"><a href="#取消文件的只读、不可删除" class="headerlink" title="取消文件的只读、不可删除"></a>取消文件的只读、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># test.txt文件</span><br>sudo chattr -i test.txt<br></code></pre></td></tr></table></figure><h4 id="取消目录下的所有文件只读、不可删除"><a href="#取消目录下的所有文件只读、不可删除" class="headerlink" title="取消目录下的所有文件只读、不可删除"></a>取消目录下的所有文件只读、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># home目录</span><br>sudo chattr -R -i /home/<br></code></pre></td></tr></table></figure><h4 id="取消文件的只能追加、不可删除"><a href="#取消文件的只能追加、不可删除" class="headerlink" title="取消文件的只能追加、不可删除"></a>取消文件的只能追加、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chattr -a test.txt<br></code></pre></td></tr></table></figure><h4 id="取消目录下的所有文件只能追加、不可删除"><a href="#取消目录下的所有文件只能追加、不可删除" class="headerlink" title="取消目录下的所有文件只能追加、不可删除"></a>取消目录下的所有文件只能追加、不可删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chattr -R -a /home/<br></code></pre></td></tr></table></figure><h4 id="查看文件属性"><a href="#查看文件属性" class="headerlink" title="查看文件属性"></a>查看文件属性</h4><blockquote><p>使用lsattr命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看test.txt文件的属性</span><br>lsattr test.txt<br><br><span class="hljs-comment"># 查看当前目录下所有文件的属性</span><br>lsattr ./<br><br><span class="hljs-comment"># 查看所有以wav后缀结尾的文件的属性</span><br>lsattr *.wav<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>chattr 并不适用于所有目录，chattr不能保护/, /dev, /var目录</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux 常用命令详解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Plus 课后习题 第四章</title>
    <link href="/2021/08/05/cpp_chapter4_20210808/"/>
    <url>/2021/08/05/cpp_chapter4_20210808/</url>
    
    <content type="html"><![CDATA[<h2 id="第四章-复合类型"><a href="#第四章-复合类型" class="headerlink" title="第四章 复合类型"></a>第四章 复合类型</h2><h3 id="4-12-1"><a href="#4-12-1" class="headerlink" title="4.12.1"></a>4.12.1</h3><blockquote><p>如何声明下述数据：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// a. actor是由30个char组成的数组</span><br><span class="hljs-keyword">char</span> actor[<span class="hljs-number">30</span>];<br>    <br><span class="hljs-comment">// b. betsie是由100个short组成的数组</span><br><span class="hljs-keyword">char</span> betsie[<span class="hljs-number">100</span>];<br><br><span class="hljs-comment">// c. chuck是由13个float组成的数组</span><br><span class="hljs-keyword">float</span> chuck[<span class="hljs-number">13</span>];<br><br><span class="hljs-comment">// d. dipsea是由64个long double组成的数组</span><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> dipsea[<span class="hljs-number">64</span>]<br></code></pre></td></tr></table></figure><h3 id="4-12-2"><a href="#4-12-2" class="headerlink" title="4.12.2"></a>4.12.2</h3><blockquote><p>使用模板类array而不是数组来完成问题1。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-comment">// a. actor是由30个char组成的数组</span><br>array&lt;<span class="hljs-keyword">char</span>, 30&gt; actor;<br>    <br><span class="hljs-comment">// b. betsie是由100个short组成的数组</span><br>array&lt;<span class="hljs-keyword">short</span>, 100&gt; betsie;<br><br><span class="hljs-comment">// c. chuck是由13个float组成的数组</span><br>array&lt;<span class="hljs-keyword">float</span>, 13&gt; chuck;<br><br><span class="hljs-comment">// d. dipsea是由64个long double组成的数组</span><br>array&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>, 64&gt; dipsea;<br></code></pre></td></tr></table></figure><h3 id="4-12-3"><a href="#4-12-3" class="headerlink" title="4.12.3"></a>4.12.3</h3><blockquote><p>声明一个包含5个元素的int数组，并将它初始化为前5个正奇数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//方案一</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br><br><span class="hljs-comment">//方案二</span><br>array&lt;<span class="hljs-keyword">int</span>, 5&gt; a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br><br><span class="hljs-comment">//方案三</span><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span> </span>= &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-12-4"><a href="#4-12-4" class="headerlink" title="4.12.4"></a>4.12.4</h3><blockquote><p>编写一条语句，将问题3中数组第一个元素和最后一个元素的和赋值给变量even.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 方案一</span><br><span class="hljs-keyword">int</span> even = a[<span class="hljs-number">0</span>] + a[<span class="hljs-number">4</span>];<br><br><span class="hljs-comment">//方案二, 方案三</span><br><span class="hljs-keyword">int</span> even = a.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>) + a.<span class="hljs-built_in">at</span>(<span class="hljs-number">4</span>);<br><span class="hljs-keyword">int</span> even = a[<span class="hljs-number">0</span>] + a[<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><h3 id="4-12-5"><a href="#4-12-5" class="headerlink" title="4.12.5"></a>4.12.5</h3><blockquote><p>编写一条语句，显示float数组ideas中的第二个元素的值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">cout &lt;&lt; ideas[<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><h3 id="4-12-6"><a href="#4-12-6" class="headerlink" title="4.12.6"></a>4.12.6</h3><blockquote><p>声明一个char的数组，并将其初始化为字符串”cheeseburger”.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">char</span> a[] = <span class="hljs-string">&quot;cheeseburger&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-12-7"><a href="#4-12-7" class="headerlink" title="4.12.7"></a>4.12.7</h3><blockquote><p>声明一个string对象，并将其初始化为字符串“Waldorf Salad”.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br>string strs = <span class="hljs-string">&quot;Waldorf Salad&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-12-8"><a href="#4-12-8" class="headerlink" title="4.12.8"></a>4.12.8</h3><blockquote><p>设计一个描述鱼的结构声明。结构中应当包括品种、重量（整数，单位为盎司）和长度（英寸，包括小数）.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fish</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">int</span> weight;<br>    <span class="hljs-keyword">double</span> length;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-12-9"><a href="#4-12-9" class="headerlink" title="4.12.9"></a>4.12.9</h3><blockquote><p>声明一个问题8中定义的结构的变量，并对他进行初始化。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">fish golden_fish = &#123;<br>    <span class="hljs-string">&quot;golden&quot;</span>,<br>    <span class="hljs-number">13</span>,<br>    <span class="hljs-number">12.99</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-12-10"><a href="#4-12-10" class="headerlink" title="4.12.10"></a>4.12.10</h3><blockquote><p>用enum定义一个名为Response的类型，它包含Yes、No、Maybe等枚举量，其中Yes的值为1，No的值为0， Maybe的值为2。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Response</span> &#123;</span>Yes=<span class="hljs-number">1</span>, No=<span class="hljs-number">0</span>, Maybe=<span class="hljs-number">2</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-12-11"><a href="#4-12-11" class="headerlink" title="4.12.11"></a>4.12.11</h3><blockquote><p>将设ted是一个double变量，请声明一个指向ted的指针，并使用该指针来显示ted的值。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">double</span> ted = <span class="hljs-number">9.9</span>;<br><span class="hljs-keyword">double</span> *pted = &amp;ted;<br></code></pre></td></tr></table></figure><h3 id="4-12-12"><a href="#4-12-12" class="headerlink" title="4.12.12"></a>4.12.12</h3><blockquote><p>假设treacle是一个包含10个元素的float数组，请声明一个指向treacle的第一个元素的指针，并使用该指针来显示数组的第一个元素和最后一个元素。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">float</span> treacle[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">float</span> *ptreacle = &amp;treacle;<br>cout &lt;&lt; ptreacle[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; ptreacle[<span class="hljs-number">9</span>] &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="4-12-13"><a href="#4-12-13" class="headerlink" title="4.12.13"></a>4.12.13</h3><blockquote><p>编写一段代码，要求用户输入一个正整数，然后创建一个动态的int数组，其中包含的元素数目等于用户输入的值。首先使用new来完成这项任务，再使用vector对象来完成这项任务。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> *parrs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    <br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">arrs</span><span class="hljs-params">(n)</span></span>;<br>    <br>    <span class="hljs-keyword">delete</span> parrs;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-12-14"><a href="#4-12-14" class="headerlink" title="4.12.14"></a>4.12.14</h3><blockquote><p>下面的代码是否有效？如果有效，它将打印出什么结果？</p><p>cout &lt;&lt; (int *) “Home of the jolly bytes”;</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">输出：<span class="hljs-number">0x4007c1</span><br>有效，表达式“Home of the jolly bytes”为一个string类型数据，cout将其地址解释为打印字符串。但类型 （<span class="hljs-keyword">int</span> *）将其地址强转为<span class="hljs-keyword">int</span>指针，cout将其<span class="hljs-keyword">int</span>指针内容输出，所以最终输出是地址信息。<br></code></pre></td></tr></table></figure><h3 id="4-12-15"><a href="#4-12-15" class="headerlink" title="4.12.15"></a>4.12.15</h3><blockquote><p>编写一段代码，给问题8中描述的结构动态分配内存，再读取该结构的成员的值。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fish</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">int</span> weight;<br>    <span class="hljs-keyword">double</span> length;<br>&#125;;<br><br>fish *pglodenfish = <span class="hljs-keyword">new</span> fish;<br>cout &lt;&lt; pgoldenfish-&gt;weight;<br>cout &lt;&lt; pgoldenfish-&gt;brand;<br></code></pre></td></tr></table></figure><h3 id="4-12-16"><a href="#4-12-16" class="headerlink" title="4.12.16"></a>4.12.16</h3><blockquote><p>程序清单4.6指出了混合输入数字和一行字符串时存储的问题，如果将下面的代码：</p><p>cin.getline(address, 80);</p><p>替换为：</p><p>cin &gt;&gt; address;</p><p>将对程序的运行带来什么影响？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">程序将不存在address获取空格符的问题，可以获取完整的address内容。<br>cin &gt;&gt; address使得程序跳过空白符、换行符，直接捕捉到address内容。但存在的问题是若整行中存在空格符，则遇到空格符后的内容都会被丢弃。<br></code></pre></td></tr></table></figure><h3 id="4-12-17"><a href="#4-12-17" class="headerlink" title="4.12.17"></a>4.12.17</h3><blockquote><p>声明一个vector对象和一个array对象，他们都包含10个string对象，指出所需的头文件，但不要使用using。使用const来指定要包含的string对象数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> str_nums = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">std::vector&lt;std::string&gt; <span class="hljs-title">vstrs</span><span class="hljs-params">(str_nums)</span></span>;<br>    std::array&lt;std::string, str_nums&gt; astrs;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-1"><a href="#4-13-1" class="headerlink" title="4.13.1"></a>4.13.1</h3><blockquote><p>编写一个C++程序，如下述输出示例所示的那样请求并显示信息：</p><p>What is your first name? Betty Sue</p><p>What is your last name? Yewe</p><p>What letter grade do you deserve? B</p><p>What is your age? 22</p><p>Name: Yewe, Betty Sue</p><p>Grade: C</p><p>Age: 22</p><p>注意：该程序应该接受的名字包含多个单词。此外，程序将向下调整成绩，即向上调一个字母。假设用户请求A、B、或C，所以不必担心D和F之间的空档。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">peopleinfo</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">char</span> grade;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> age;<br>&#125;;<br>    <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    peopleinfo people;<br>    cout &lt;&lt; <span class="hljs-string">&quot;What is your first name? &quot;</span>;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    cin.<span class="hljs-built_in">getline</span>(name);<br>    cin.<span class="hljs-built_in">get</span>();<br>    people.name[<span class="hljs-number">0</span>] = name;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;What is your last name? &quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name);<br>    cin.<span class="hljs-built_in">get</span>();<br>    people.name[<span class="hljs-number">1</span>] = name;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;What letter grade do you deserve? &quot;</span>;<br>    cin &gt;&gt; people.grade;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;What is your age? &quot;</span>;<br>    cin &gt;&gt; people.age;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; people.name[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; people.name[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Grade: &quot;</span> &lt;&lt; ++people.grade &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Age: &quot;</span> &lt;&lt; people.age &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-2"><a href="#4-13-2" class="headerlink" title="4.13.2"></a>4.13.2</h3><blockquote><p>修改程序清单4.4，使用C++ string类而不是char数组。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//清单4.4程序代码</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ArSize = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">char</span> name[ArSize];<br>    <span class="hljs-keyword">char</span> dessert[ArSize];<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your name: \n&quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name, ArSize);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your favorite dessert: \n&quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(dessert, ArSize);<br>    cout &lt;&lt; <span class="hljs-string">&quot;I have some delicious &quot;</span> &lt;&lt; dessert;<br>    cout &lt;&lt; <span class="hljs-string">&quot; for you, &quot;</span> &lt;&lt; name &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//string类改写版程序代码</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string name, dessert;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your name: \n&quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, name);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your favorite dessert: \n&quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, dessert);<br>    cout &lt;&lt; <span class="hljs-string">&quot;I have some delicious &quot;</span> &lt;&lt; dessert;<br>    cout &lt;&lt; <span class="hljs-string">&quot; for you, &quot;</span> &lt;&lt; name &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-3"><a href="#4-13-3" class="headerlink" title="4.13.3"></a>4.13.3</h3><blockquote><p>编写一个程序，它要求用户首先输入其名，然后输入其姓；然后程序使用一个逗号和空格将姓和名组合起来，并存储和显示组合结果。请使用char数组和头文件cstring中的函数。下面是该程序运行时的情形：</p><p>Enter your first name: Flip</p><p>Enter your last name: Fleming</p><p>Here’s the information in a single string: Fleming, Flip</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">2</span>][<span class="hljs-number">20</span>];<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your first name: &quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name[<span class="hljs-number">0</span>], <span class="hljs-number">20</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your last name: &quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(name[<span class="hljs-number">1</span>], <span class="hljs-number">20</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Here&#x27;s the information in a single string: &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">strcat</span>(<span class="hljs-built_in">strcat</span>(name[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;, &quot;</span>), name[<span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-4"><a href="#4-13-4" class="headerlink" title="4.13.4"></a>4.13.4</h3><blockquote><p>编写一个程序，它要求用户首先输入其名，再输入其姓；然后程序使用一个逗号和空格将姓和名组合起来，并存储和显示组合结果。请使用string对象和头文件string中的函数。下面是该程序运行时的情形：</p><p>Enter your first name: Flip</p><p>Enter your last name: Fleming</p><p>Here’s the information in a single string: Fleming, Flip</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string name[<span class="hljs-number">2</span>];<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your first name: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, name[<span class="hljs-number">0</span>]);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your last name: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, name[<span class="hljs-number">1</span>]);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Here&#x27;s the information in a single string: &quot;</span>;<br>    cout &lt;&lt; name[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;, &quot;</span> + name[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-5"><a href="#4-13-5" class="headerlink" title="4.13.5"></a>4.13.5</h3><blockquote><p>结构CandyBar包含三个成员。第一个成员存储了糖块的品牌；第二个成员存储糖块的重量（可以有小数）；第三个成员存储了糖块的卡路里含量（整数）。请编写一个程序，声明这个结构，创建一个名为snack的CandyBar变量，并将其成员分别初始化为“Mocha Munch”、2.3和350.初始化应在声明snack时进行。最后，程序显示snack变量的内容。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CandyBar</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> calorie;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    CandyBar snack = &#123;<br>        <span class="hljs-string">&quot;Mocha Munch&quot;</span>,<br>        <span class="hljs-number">2.3</span>,<br>        <span class="hljs-number">350</span><br>    &#125;;<br>    <br>    cout &lt;&lt; snack.brand &lt;&lt; endl;<br>    cout &lt;&lt; snack.weight &lt;&lt; endl;<br>    cout &lt;&lt; snack.calorie &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-6"><a href="#4-13-6" class="headerlink" title="4.13.6"></a>4.13.6</h3><blockquote><p>结构CandyBar包含3个成员，如编程练习5所示。请编写一个程序，创建一个包含3个元素的CandyBar数组，并将它们初始化为所选择的值，然后显示每个结构的内容。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CandyBar</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> calorie;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    CandyBar snack[<span class="hljs-number">3</span>] = &#123;<br>        &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.3</span>, <span class="hljs-number">350</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">450</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">550</span>&#125;<br>    &#125;;<br>    <br>    cout &lt;&lt; snack[<span class="hljs-number">0</span>].brand &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">1</span>].weight &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">3</span>].calorie &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-7"><a href="#4-13-7" class="headerlink" title="4.13.7"></a>4.13.7</h3><blockquote><p>William Wingate从事披萨饼分析服务。对于每个披萨饼，他都需要记录下列信息：</p><p>披萨饼公司的名称，可以有多个单词组成。</p><p>披萨饼的直径。</p><p>披萨饼的重量。</p><p>请设计一个能够存储这些信息的结构，并编写一个使用这些结构变量的程序。程序将请求用户输入上述信息，然后显示这些信息。请你使用cin（或其他方法）和cout。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Pizza</span>&#123;</span><br>    string comp;<br>    <span class="hljs-keyword">double</span> diam;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Pizza bug_pizza;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the company name of Pizza: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, bug_pizza.comp);<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the diameter of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza.diam;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the weight of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza.weight;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;company: &quot;</span> &lt;&lt; bug_pizza.comp &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-8"><a href="#4-13-8" class="headerlink" title="4.13.8"></a>4.13.8</h3><blockquote><p>完成编程练习7，但使用new来动态分配数组，而不是声明一个结构变量。另外，让程序在请求输入披萨饼公司名称之前输入披萨饼的直径。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Pizza</span>&#123;</span><br>    string comp;<br>    <span class="hljs-keyword">double</span> diam;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Pizza *bug_pizza = <span class="hljs-keyword">new</span> Pizza;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the diameter of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza-&gt;diam;<br>    cin.<span class="hljs-built_in">get</span>();<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the company name of Pizza: &quot;</span>;<br>    <span class="hljs-built_in">getline</span>(cin, bug_pizza-&gt;comp);<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the weight of Pizza: &quot;</span>;<br>    cin &gt;&gt; bug_pizza-&gt;weight;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;company: &quot;</span> &lt;&lt; bug_pizza-&gt;comp &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">delete</span> bug_pizza;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-9"><a href="#4-13-9" class="headerlink" title="4.13.9"></a>4.13.9</h3><blockquote><p>完成编程练习6，但使用new来动态分配数组，而不是声明一个包含3个元素的CandyBar数组。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CandyBar</span>&#123;</span><br>    string brand;<br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> calorie;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    CandyBar *snack = <span class="hljs-keyword">new</span> CandyBar[<span class="hljs-number">3</span>];<br>    *snack = &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.3</span>, <span class="hljs-number">350</span>&#125;;<br>    *(snack+<span class="hljs-number">1</span>) = &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">450</span>&#125;;<br>    *(snack+<span class="hljs-number">2</span>) = &#123;<span class="hljs-string">&quot;Mocha Munch&quot;</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">550</span>&#125;;<br>    <br>    cout &lt;&lt; snack[<span class="hljs-number">0</span>].brand &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">1</span>].weight &lt;&lt; endl;<br>    cout &lt;&lt; snack[<span class="hljs-number">3</span>].calorie &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13-10"><a href="#4-13-10" class="headerlink" title="4.13.10"></a>4.13.10</h3><blockquote><p>编写一个程序，让用户输入三次40码跑的成绩（如果您愿意，也可以让用户输入40米跑的成绩），并显示次数和平均成绩。请使用一个array数组对象来存储数据（如果编译器不支持array类，请使用数组）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    array&lt;<span class="hljs-keyword">double</span>, 3&gt; match_grade;<br>    cout &lt;&lt; <span class="hljs-string">&quot;input: &quot;</span>;<br>    cin &gt;&gt; match_grade[<span class="hljs-number">0</span>];<br>    count++;<br>    cin &gt;&gt; match_grade[<span class="hljs-number">1</span>];<br>    count++;<br>    cin &gt;&gt; match_grade[<span class="hljs-number">2</span>];<br>    count++;<br>   <br>    cout &lt;&lt; <span class="hljs-string">&quot;Total times: &quot;</span> &lt;&lt; count &lt;&lt; endl;<br>    cout &lt;&lt; (match_grade[<span class="hljs-number">0</span>] + match_grade[<span class="hljs-number">1</span>] + match_grade[<span class="hljs-number">2</span>]) / count &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>课后习题答案</category>
      
      <category>C++ Primer Plus 6th</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Plus 课后习题 第三章</title>
    <link href="/2021/08/04/2021-08-03-my-story/"/>
    <url>/2021/08/04/2021-08-03-my-story/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>课后习题答案</category>
      
      <category>C++ Primer Plus 6th</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Plus 课后习题 第二章</title>
    <link href="/2021/08/04/2021-08-04-hello-world/"/>
    <url>/2021/08/04/2021-08-04-hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>课后习题答案</category>
      
      <category>C++ Primer Plus 6th</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Plus 课后习题 第三章</title>
    <link href="/2021/08/04/cpp_chapter3_20210807/"/>
    <url>/2021/08/04/cpp_chapter3_20210807/</url>
    
    <content type="html"><![CDATA[<h2 id="第三章-处理数据"><a href="#第三章-处理数据" class="headerlink" title="第三章 处理数据"></a>第三章 处理数据</h2><h3 id="3-6-1"><a href="#3-6-1" class="headerlink" title="3.6.1"></a>3.6.1</h3><blockquote><p>为什么C++有多种整型？</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Tex">C++中多种整型的存在是为了针对特殊场景提供合适的解决方案。<br>C++中不同整型使用不同内存存储，使用的内存越大，则可以表示的整数值范围越大。同时有些整型可以表示无符号数，有些可以表示有符号数，而他们所使用的内存不一样。<br>一般而言会针对特定的场景选用合适的整型，以求在需求和性能上达到平衡。<br></code></pre></td></tr></table></figure><h3 id="3-6-2"><a href="#3-6-2" class="headerlink" title="3.6.2"></a>3.6.2</h3><blockquote><p>声明与下述描述相符的变量。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// short整型， 值为80</span><br><span class="hljs-keyword">short</span> a = <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">// unsigned int整数，值为42110</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">42110</span>;<br><br><span class="hljs-comment">// 值为3000000000的整数</span><br><span class="hljs-keyword">long</span> c = <span class="hljs-number">3000000000</span>;<br></code></pre></td></tr></table></figure><h3 id="3-6-3"><a href="#3-6-3" class="headerlink" title="3.6.3"></a>3.6.3</h3><blockquote><p>C++提供了什么措施来防止超出整型的范围？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// C++没有提供自动防止超出整型限制的功能，可以使用头文件climits来确定每个整型的范围大小</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;climits&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; INT_MAX &lt;&lt; endl;<br>    cout &lt;&lt; INT_MIN &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="3-6-4"><a href="#3-6-4" class="headerlink" title="3.6.4"></a>3.6.4</h3><blockquote><p>33L和33之间有什么区别</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">整型类型不一样。<span class="hljs-number">33L</span>是<span class="hljs-keyword">long</span>类型，<span class="hljs-number">33</span>是<span class="hljs-keyword">int</span>类型。<br></code></pre></td></tr></table></figure><h3 id="3-6-5"><a href="#3-6-5" class="headerlink" title="3.6.5"></a>3.6.5</h3><blockquote><p>下面两条C++语句是否等价？</p><p>char grade = 65;<br>char grade = ‘A’;</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">不一定等价。<br>65是int整型变量，而‘A’是字符型变量。在ASCII编码的系统中，65对应的ASCII字符是’A‘.<br>但若系统不是ASCII编码的系统，则65可能对应其他字符。<br></code></pre></td></tr></table></figure><h3 id="3-6-6"><a href="#3-6-6" class="headerlink" title="3.6.6"></a>3.6.6</h3><blockquote><p>如何使用C++来找出编码88表示的字符？指出至少两种方法。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//方法一</span><br><span class="hljs-keyword">char</span> ch = <span class="hljs-number">88</span>;<br>cout &lt;&lt; ch &lt;&lt; endl;<br><br><span class="hljs-comment">//方法二</span><br>cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">char</span></span>(<span class="hljs-number">88</span>) &lt;&lt; endl;<br><br><span class="hljs-comment">//方法三</span><br>cout.<span class="hljs-built_in">put</span>(<span class="hljs-built_in"><span class="hljs-keyword">char</span></span>(<span class="hljs-number">88</span>))<br></code></pre></td></tr></table></figure><h3 id="3-6-7"><a href="#3-6-7" class="headerlink" title="3.6.7"></a>3.6.7</h3><blockquote><p>将long值赋给float变量会导致舍入误差，将long值赋给double变量呢？将long long值赋给double变量呢？</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">取决于类型的长度，若long为4字节，则能表达的数字为10位，而double至少表达的位数为13位，因此不存在舍入误差。但long long能表达的数字为19位，超过了double所能表达的范围，因此存在舍入误差。<br></code></pre></td></tr></table></figure><h3 id="3-6-8"><a href="#3-6-8" class="headerlink" title="3.6.8"></a>3.6.8</h3><blockquote><p>下列C++表达式的结果分别是多少？</p><p>a. 8*9+2</p><p>b. 6*3/4</p><p>c. 3/4*6</p><p>d. 6.0*3/4</p><p>e. 15%4</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-number">8</span>*<span class="hljs-number">9</span>+<span class="hljs-number">2</span> = <span class="hljs-number">74</span><br><span class="hljs-number">6</span>*<span class="hljs-number">3</span>/<span class="hljs-number">4</span> = <span class="hljs-number">4</span><br><span class="hljs-number">3</span>/<span class="hljs-number">4</span>*<span class="hljs-number">6</span> = <span class="hljs-number">0</span><br><span class="hljs-number">6.0</span>*<span class="hljs-number">3</span>/<span class="hljs-number">4</span> = <span class="hljs-number">4.5</span><br><span class="hljs-number">15</span>%<span class="hljs-number">4</span> = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="3-6-9"><a href="#3-6-9" class="headerlink" title="3.6.9"></a>3.6.9</h3><blockquote><p>假设x1和x2是两个double变量，您要将他们作为整数相加，再将结果赋给一个整型变量。请编写一条完成这项任务的C++语句。如果要将它们作为double值相加并转换为int呢？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> value = <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(x1) + <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(x2);<br><span class="hljs-keyword">int</span> value = <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(x1+x2);<br></code></pre></td></tr></table></figure><h3 id="3-6-10"><a href="#3-6-10" class="headerlink" title="3.6.10"></a>3.6.10</h3><blockquote><p>下面每条语句声明的变量都是什么类型？</p><p>a. auto cars = 15;</p><p>b. auto iou = 150.37f;</p><p>c. auto level = ‘B’;</p><p>d. auto crat = U’/U00002155’;</p><p>e. auto fract = 8.25f/2.5;</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">a: int</span><br><span class="hljs-comment">b: float</span><br><span class="hljs-comment">c: char</span><br><span class="hljs-comment">d: char32_t</span><br><span class="hljs-comment">e: float</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//  验证变量类型代码</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;typeinfo&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">auto</span> fract = <span class="hljs-number">8.25f</span>/<span class="hljs-number">2.5</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Type is: &quot;</span> &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">typeid</span></span>(fract).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-1"><a href="#3-7-1" class="headerlink" title="3.7.1"></a>3.7.1</h3><blockquote><p>编写一个小程序，要求用户使用一个整数指出自己的身高(单位为英寸)，然后将身高转换为英尺和英寸。该程序使用下划线字符来指示输入位置，另外，使用一个const符号常量来表示转换因子。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> factor = <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">int</span> heights = <span class="hljs-number">0</span>;<br>    cont &lt;&lt; <span class="hljs-string">&quot;_&quot;</span>;<br>    cin &gt;&gt; heights;<br>    <span class="hljs-keyword">int</span> height_foot = heights / factor;<br>    <span class="hljs-keyword">int</span> height_inch = heights % factor;<br>    cout &lt;&lt; height_foot &lt;&lt; height_inch;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-2"><a href="#3-7-2" class="headerlink" title="3.7.2"></a>3.7.2</h3><blockquote><p>编写一个小程序，要求以几英尺几英寸的方式输入其身高，并以磅为单位输入其体重（使用三个变量来存储这些信息）。该程序报告其BMI（Body Mass Index，体重指数）。为了计算BMI，该程序以英寸的方式指出用户的身高（1英寸为12英尺），并将以英寸为单位的身高转换为以米为单位的身高（1英寸=0.0254米）。然后，将以磅为单位的体重转换为以千克为单位的体重（1千克=2.2磅）。最后，计算相应的BMI-体重（千克）除以身高（米）的平方。用符号常量表示各种转换因子。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height_foot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> height_inch = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">double</span> weight = <span class="hljs-number">0.0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your height and weight: &quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; height_foot &gt;&gt; height_inch &gt;&gt; weight;<br>    <br>    <span class="hljs-keyword">double</span> height_meter = (height_foot*<span class="hljs-number">12</span> + height_inch)*<span class="hljs-number">0.0254</span>;<br>    <span class="hljs-keyword">double</span> weight_kg = weight/<span class="hljs-number">2.2</span>;<br>    <span class="hljs-keyword">double</span> bmi = weight_kg / (height_meter * height_meter);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Your BMI: &quot;</span> &lt;&lt; bmi &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-3"><a href="#3-7-3" class="headerlink" title="3.7.3"></a>3.7.3</h3><blockquote><p>编写一个程序，要求用户以度、分、秒的方式输入一个纬度，然后以度为单位显示该纬度。1度为60分，1分等于60秒，请以符号常量的方式表示这些值。对于每个输入值，应使用一个独立的变量存储它。下面是该程序运行时的情况：</p><p>Enter a latitude in degrees, minutes, and seconds:</p><p>First, enter the degrees: 37</p><p>Next, enter the minutes of arc: 51</p><p>Finally, enter the seconds of arc: 19</p><p>37 degrees, 51 minutes, 19 seconds = 37.8553 degrees</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> degrees = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> minutes = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> seconds = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> time_factor = <span class="hljs-number">60</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter a latitude in degrees, minutes, and seconds:&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;First, enter the degrees:&quot;</span>;<br>    cin &gt;&gt; degrees;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Next, enter the minutes of arc: &quot;</span>;<br>    cin &gt;&gt; minutes;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Finally, enter the seconds of arc:&quot;</span>;<br>    cin &gt;&gt; seconds;<br>    <br>    <span class="hljs-keyword">double</span> degrees_beta = degrees + (<span class="hljs-keyword">double</span>)minutes / time_factor + (<span class="hljs-keyword">double</span>)seconds / (time_factor*time_factor);<br>    <br>    cout &lt;&lt; degrees &lt;&lt;<span class="hljs-string">&quot; degrees, &quot;</span> &lt;&lt; minutes &lt;&lt; <span class="hljs-string">&quot; minutes, &quot;</span> &lt;&lt; seconds &lt;&lt; <span class="hljs-string">&quot; seconds = &quot;</span> &lt;&lt; degrees_beta &lt;&lt; <span class="hljs-string">&quot; degrees&quot;</span> &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-4"><a href="#3-7-4" class="headerlink" title="3.7.4"></a>3.7.4</h3><blockquote><p>编写一个程序，要求用户以整数方式输入秒数（使用long或long long存储），然后以天、小时、分钟和秒的方式显示这段时间。使用符号常量来表示每天有多少小时、每小时有多少分钟以及每分钟有多少秒。该程序的输出应与下面类似：</p><p>Enter the number of seconds: 31600000</p><p>31600000 seconds = 365 days, 17 hours, 46 minutes, 40 seconds</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> days = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> hours = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> minutes = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> seconds = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> big_seconds = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> one_day_equal_hours = <span class="hljs-number">24</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> one_hour_equal_minutes = <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> one_minute_equal_seconds = <span class="hljs-number">60</span>;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of seconds: &quot;</span>;<br>    cin &gt;&gt; big_seconds;<br>    <br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> big_seconds_temp = big_seconds;<br>    <br>    days = big_seconds_temp/(one_day_equal_hours*one_hour_equal_minutes*one_minute_equal_seconds);<br>    big_seconds_temp = big_seconds_temp%(one_day_equal_hours*one_hour_equal_minutes*one_minute_equal_seconds);<br>    <br>    hours = big_seconds_temp / (one_hour_equal_minutes*one_minute_equal_seconds);<br>    big_seconds_temp = big_seconds_temp % (one_hour_equal_minutes*one_minute_equal_seconds);<br>    <br>    minutes = big_seconds_temp / one_minute_equal_seconds;<br>    seconds = big_seconds_temp % one_minute_equal_seconds;<br>    <br>    cout &lt;&lt; big_seconds &lt;&lt; <span class="hljs-string">&quot; seconds = &quot;</span> &lt;&lt; days &lt;&lt; <span class="hljs-string">&quot; days, &quot;</span> &lt;&lt; hours &lt;&lt; <span class="hljs-string">&quot; hours, &quot;</span> &lt;&lt; minutes &lt;&lt; <span class="hljs-string">&quot; minutes, &quot;</span> &lt;&lt; seconds &lt;&lt; <span class="hljs-string">&quot; seconds.&quot;</span> &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-5"><a href="#3-7-5" class="headerlink" title="3.7.5"></a>3.7.5</h3><blockquote><p>编写一个程序，要求用户输入全球当前的人口和美国当前的人口（或其他国家的人口）。将这些信息存储在long long变量中，并让程序显示美国（或其他国家）的人口占全球人口的百分比。该程序的输出应与下面类似：</p><p>Enter the world’s population: 6898758899</p><p>Enter the population of the US: 310783781</p><p>The population of the US is 4.50492% of the world population</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> world_population = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> us_population = <span class="hljs-number">0</span>;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the world&#x27;s population: &quot;</span>;<br>    cin &gt;&gt; world_population;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the population of the US: &quot;</span>;<br>    cin &gt;&gt; us_population;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;The population of the US is &quot;</span> &lt;&lt; (<span class="hljs-keyword">double</span>)us_population / world_population * <span class="hljs-number">100</span> &lt;&lt; <span class="hljs-string">&quot;% of the world population&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-6"><a href="#3-7-6" class="headerlink" title="3.7.6"></a>3.7.6</h3><blockquote><p>编写一个程序，要求用户输入驱车里程（英里）和使用汽油量（加仑），然后指出汽车耗油量为一加仑的里程。如果愿意，也可以让程序要求用户以公里为单位输入距离，并以升为单位输入汽油量，然后指出欧洲风格的结果-即每100公里的耗油量（L）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">double</span> distance = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">double</span> gas = <span class="hljs-number">0.0</span>;<br>    cout &lt;&lt; distance / gas &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-7"><a href="#3-7-7" class="headerlink" title="3.7.7"></a>3.7.7</h3><blockquote><p>编写一个程序，要求用户按照欧洲风格输入汽车的耗油量（每100公里消耗的汽油量（升）），然后将其转换为美国风格的耗油量—每加仑多少英里。注意，除了使用不同的单位计量外，美国方法（距离/燃料）与欧洲方法（燃料/距离）相反。100公里等于62.14英里，1加仑等于3.785升。因此，19mpg大约合12.41/100km，27mpg大约合8.71/100km。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">double</span> total_gas_eng = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">double</span> total_gas_usa = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> hundred_km_equal_miles = <span class="hljs-number">62.14</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> one_gallon_equal_litres = <span class="hljs-number">3.785</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the car&#x27;s gas waste: &quot;</span>;<br>    cin &gt;&gt; total_gas_eng;<br>    <br>    <span class="hljs-keyword">double</span> gallons = total_gas_eng  / one_gallon_equal_litres;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The mpg is: &quot;</span> &lt;&lt; hundred_km_equal_miles/gallons &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>课后习题答案</category>
      
      <category>C++ Primer Plus 6th</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Plus 课后习题 第二章</title>
    <link href="/2021/08/04/cpp_chapter2_20210807/"/>
    <url>/2021/08/04/cpp_chapter2_20210807/</url>
    
    <content type="html"><![CDATA[<h2 id="第二章-开始学习C"><a href="#第二章-开始学习C" class="headerlink" title="第二章 开始学习C++"></a>第二章 开始学习C++</h2><h3 id="2-6-1"><a href="#2-6-1" class="headerlink" title="2.6.1"></a>2.6.1</h3><blockquote><p>C++程序的模块叫什么？</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">函数。C++程序由一个或多个被称为函数的模块组成。<br></code></pre></td></tr></table></figure><h3 id="2-6-2"><a href="#2-6-2" class="headerlink" title="2.6.2"></a>2.6.2</h3><blockquote><p>下面的预处理器编译指令是做什么用的？ </p><h1 id="include"><a href="#include" class="headerlink" title="include \"></a>include \<iostream></h1></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">该编译指令导致预处理器将iostream文件的内容添加到程序中。这是一种典型的预处理操作：在源文件代码被编译之前，替换或添加文本。<br>其中iostream中的io指的是输入和输出，C++的输入输出方案涉及iostream文件中的多个定义。<br></code></pre></td></tr></table></figure><h3 id="2-6-3"><a href="#2-6-3" class="headerlink" title="2.6.3"></a>2.6.3</h3><blockquote><p>下面的语句是做什么用的？</p><p>using namespace std;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C++使用名称空间来管理不同厂商提供的相同函数名，这里表示指定编译器使用std名称空间下的函数。<br></code></pre></td></tr></table></figure><h3 id="2-6-4"><a href="#2-6-4" class="headerlink" title="2.6.4"></a>2.6.4</h3><blockquote><p>什么语句可以用来打印短语 “Hello, world”, 然后开始新的一行？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Hello, world&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-5"><a href="#2-6-5" class="headerlink" title="2.6.5"></a>2.6.5</h3><blockquote><p>什么语句可以用来创建名为cheeses的整数变量？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> cheeses;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-6"><a href="#2-6-6" class="headerlink" title="2.6.6"></a>2.6.6</h3><blockquote><p>什么语句可以用来将值32赋给变量cheeses？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> cheeses;<br>cheeses = <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-7"><a href="#2-6-7" class="headerlink" title="2.6.7"></a>2.6.7</h3><blockquote><p>什么语句可以用来将从键盘输入的值读入变量cheeses中？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin &gt;&gt; cheeses;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-8"><a href="#2-6-8" class="headerlink" title="2.6.8"></a>2.6.8</h3><blockquote><p>什么语句可以用来打印“We have X varieties of cheese”，其中X为变量cheeses的当前值？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cheeses;<br>cin &gt;&gt; cheeses;<br>cout &lt;&lt; <span class="hljs-string">&quot;We have X varieties of &quot;</span> &lt;&lt; cheeses &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-9"><a href="#2-6-9" class="headerlink" title="2.6.9"></a>2.6.9</h3><blockquote><p>下面的函数原型指出了关于函数的哪些信息？</p><p>int froop(double t);</p><p>void rattle(int n);</p><p>int prune(void);</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">定义了函数的返回类型。<br>定义了函数的传入参数类型。<br></code></pre></td></tr></table></figure><h3 id="2-6-10"><a href="#2-6-10" class="headerlink" title="2.6.10"></a>2.6.10</h3><blockquote><p>定义函数时，在什么情况下不必使用关键字return？</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">在函数不需要具体返回值时。<br></code></pre></td></tr></table></figure><h3 id="2-6-11"><a href="#2-6-11" class="headerlink" title="2.6.11"></a>2.6.11</h3><blockquote><p>假设您编写的main()函数包含如下代码：</p><p>cout &lt;&lt; “Please enter you PIN: “;</p><p>而编译器指出cout是一个未知标识符，导致这种问题的原因是什么？指出三种修复这种问题的方法。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">未引入cout的相关声明<br>未引入相应名称空间<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 方案一</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Please enter you PIN: &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//方案二</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Please enter you PIN: &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//方案三</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">using</span> std::cout;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Please enter you PIN: &quot;</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-1"><a href="#2-7-1" class="headerlink" title="2.7.1"></a>2.7.1</h3><blockquote><p>编写一个C++程序，它显示您的姓名和地址</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Yuanzhi&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;yuanzhi@ruc.edu.cn&quot;</span> &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-2"><a href="#2-7-2" class="headerlink" title="2.7.2"></a>2.7.2</h3><blockquote><p>编写一个C++程序，它要求用户输入一个以long为单位的距离，然后将它转换为码（一long等于200码）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">double</span> distance = <span class="hljs-number">0.0</span>;<br>    cin &gt;&gt; distance;<br>    cout &lt;&lt; distance*<span class="hljs-number">220</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-3"><a href="#2-7-3" class="headerlink" title="2.7.3"></a>2.7.3</h3><blockquote><p>编写一个C++程序，它使用3个用户定义的函数（包括main()），并生成下面的输出：</p><p>Three blind mice</p><p>Three blind mice</p><p>See how they run</p><p>See how they run</p><p>其中一个函数要调用两次，该函数生成前两行；另一个函数也要被调用两次，生成余下的输出。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cluster_one</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Three blind mice&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cluster_two</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;See how they run&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cluster_one</span>();<br>    <span class="hljs-built_in">cluster_one</span>();<br>    <span class="hljs-built_in">cluster_two</span>();<br>    <span class="hljs-built_in">cluster_two</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-4"><a href="#2-7-4" class="headerlink" title="2.7.4"></a>2.7.4</h3><blockquote><p>编写一个程序，让用户输入其年龄，然后显示该年龄包含多少个月，如下所示：</p><p>Enter your age: 29</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> age_years = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter your age: &quot;</span>;<br>    cin &gt;&gt; age_years;<br>    <br>    cout &lt;&lt; age_years * <span class="hljs-number">12</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-5"><a href="#2-7-5" class="headerlink" title="2.7.5"></a>2.7.5</h3><blockquote><p>编写一个程序，其中的main()调用一个用户定义的函数（以摄氏温度值为参数，并返回相应的华氏温度值）。该程序按照下面的格式要求用户输入摄氏温度值，并显示结果：</p><p>Please enter a Celsius value: 20</p><p>20 degrees Celsius is 68 degrees Fahrenheit.</p><p>下面是转换公式：华氏温度=1.8 × 摄氏温度 + 32.0</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">convert_celsius_to_fahrenheit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> celsius_value)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.8</span>*celsius_value + <span class="hljs-number">32.0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">double</span> celsius_value = <span class="hljs-number">0.0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Please enter a Celsius value: &quot;</span>;<br>    cin &gt;&gt; celsius_value;<br>    <br>    fahrenheit_value = <span class="hljs-built_in">convert_celsius_to_fahrenheit</span>(celsius_value);<br>    cout &lt;&lt; celsius_value &lt;&lt; <span class="hljs-string">&quot; degrees Celsius is &quot;</span> &lt;&lt; fahreheit_value &lt;&lt; <span class="hljs-string">&quot; degrees Fahrenheit.&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-6"><a href="#2-7-6" class="headerlink" title="2.7.6"></a>2.7.6</h3><blockquote><p>编写一个程序，其main()调用一个用户定义的函数（以光年值为参数，并返回对应天文单位的值）。该程序按下面的格式要求用户输入光年值，并显示结果：</p><p>Enter the number of light years: 4.2</p><p>4.2 light years = 265608 astronomical units.</p><p>转换公式：1光年=63240天文单位。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">conver_lightyears_to_astronomical</span><span class="hljs-params">(<span class="hljs-keyword">double</span> light_years)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> light_years * <span class="hljs-number">63240</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">double</span> light_years = <span class="hljs-number">0.0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of light years: &quot;</span>;<br>    cin &gt;&gt; light_years;<br>    <br>    astronomical = <span class="hljs-built_in">conver_lightyears_to_astronomical</span>(light_years);<br>    <br>    cout &lt;&lt; light_years &lt;&lt; <span class="hljs-string">&quot; light years = &quot;</span> &lt;&lt; astronomical &lt;&lt; <span class="hljs-string">&quot; astronomical units&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-7"><a href="#2-7-7" class="headerlink" title="2.7.7"></a>2.7.7</h3><blockquote><p>编写一个程序，要求用户输入小时数和分钟数。在main()函数中，将这两个值传递给一个void函数，后者以下面这样的格式显示这两个值：</p><p>Enter the number of hours: 9</p><p>Enter the number of minutes: 28</p><p>Time: 9:28</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">concat_hour_and_minute</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hours, <span class="hljs-keyword">int</span> minutes)</span></span>&#123;<br>    cout &lt;&lt; hours &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; minutes &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> hours = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> minutes = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of hours: &quot;</span>;<br>    cin &gt;&gt; hours;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of minutes: &quot;</span>;<br>    cin &gt;&gt; minutes;<br>    <span class="hljs-built_in">concat_hour_and_minute</span>(hours, minutes);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>课后习题答案</category>
      
      <category>C++ Primer Plus 6th</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/01/hello-world/"/>
    <url>/2021/08/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
